.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PPIx::Regexp::Token::Reference 3"
.TH PPIx::Regexp::Token::Reference 3 "2015-10-31" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PPIx::Regexp::Token::Reference \- Represent a reference to a capture
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use PPIx::Regexp::Dumper;
\& PPIx::Regexp::Dumper\->new( \*(Aqqr{\e1}smx\*(Aq )
\&     \->print();
.Ve
.SH "INHERITANCE"
.IX Header "INHERITANCE"
\&\f(CW\*(C`PPIx::Regexp::Token::Reference\*(C'\fR is a
PPIx::Regexp::Token.
.PP
\&\f(CW\*(C`PPIx::Regexp::Token::Reference\*(C'\fR is the parent of
PPIx::Regexp::Token::Backreference,
PPIx::Regexp::Token::Condition and
PPIx::Regexp::Token::Recursion.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This abstract class represents a reference to a capture buffer, either
numbered or named. It should never be instantiated, but it provides a
number of methods to its subclasses.
.SH "METHODS"
.IX Header "METHODS"
This class provides the following public methods. Methods not documented
here are private, and unsupported in the sense that the author reserves
the right to change or remove them without notice.
.SS "absolute"
.IX Subsection "absolute"
.Vb 1
\& print "The absolute reference is ", $ref\->absolute(), "\en";
.Ve
.PP
This method returns the absolute number of the capture buffer referred
to. This is the same as \fInumber()\fR for unsigned numeric references. If the
reference is to a named buffer, \f(CW\*(C`undef\*(C'\fR is returned.
.SS "is_named"
.IX Subsection "is_named"
.Vb 1
\& $ref\->is_named and print "named reference\en";
.Ve
.PP
This method returns true if the reference is named rather than numbered.
.SS "is_relative"
.IX Subsection "is_relative"
.Vb 2
\& $ref\->is_relative()
\&     and print "relative numbered reference\en";
.Ve
.PP
This method returns true if the reference is numbered and it is a
relative number (i.e. if it is signed).
.SS "name"
.IX Subsection "name"
.Vb 1
\& print "The name is ", $ref\->name(), "\en";
.Ve
.PP
This method returns the name of the capture buffer referred to. In the
case of a reference to a numbered capture (i.e. \f(CW\*(C`is_named\*(C'\fR returns
false), this method returns \f(CW\*(C`undef\*(C'\fR.
.SS "number"
.IX Subsection "number"
.Vb 1
\& print "The number is ", $ref\->number(), "\en";
.Ve
.PP
This method returns the number of the capture buffer referred to. In the
case of a reference to a named capture (i.e. \f(CW\*(C`is_named\*(C'\fR returns true),
this method returns \f(CW\*(C`undef\*(C'\fR.
.SH "SUPPORT"
.IX Header "SUPPORT"
Support is by the author. Please file bug reports at
<http://rt.cpan.org>, or in electronic mail to the author.
.SH "AUTHOR"
.IX Header "AUTHOR"
Thomas R. Wyant, \s-1III \s0\fIwyant at cpan dot org\fR
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2009\-2015 by Thomas R. Wyant, \s-1III\s0
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl 5.10.0. For more details, see the full text
of the licenses in the directory \s-1LICENSES.\s0
.PP
This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.
