.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PPIx::Regexp::Structure 3"
.TH PPIx::Regexp::Structure 3 "2015-10-31" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PPIx::Regexp::Structure \- Represent a structure.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use PPIx::Regexp::Dumper;
\& PPIx::Regexp::Dumper\->new( \*(Aqqr{(foo)}\*(Aq )\->print();
.Ve
.SH "INHERITANCE"
.IX Header "INHERITANCE"
\&\f(CW\*(C`PPIx::Regexp::Structure\*(C'\fR is a
PPIx::Regexp::Node.
.PP
\&\f(CW\*(C`PPIx::Regexp::Structure\*(C'\fR is the parent of
PPIx::Regexp::Structure::Assertion,
PPIx::Regexp::Structure::BranchReset,
PPIx::Regexp::Structure::Capture,
PPIx::Regexp::Structure::CharClass,
PPIx::Regexp::Structure::Code,
PPIx::Regexp::Structure::Main,
PPIx::Regexp::Structure::Modifier,
PPIx::Regexp::Structure::Quantifier,
PPIx::Regexp::Structure::Subexpression,
PPIx::Regexp::Structure::Switch and
PPIx::Regexp::Structure::Unknown.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class represents a bracketed construction of some sort. The
brackets considered part of the structure, but not inside it. So the
\&\f(CW\*(C`elements()\*(C'\fR method returns the brackets if they are defined, but the
\&\f(CW\*(C`children()\*(C'\fR method does not.
.SH "METHODS"
.IX Header "METHODS"
This class provides the following public methods. Methods not documented
here are private, and unsupported in the sense that the author reserves
the right to change or remove them without notice.
.SS "finish"
.IX Subsection "finish"
.Vb 3
\& my $elem = $struct\->finish();
\& my @elem = $struct\->finish();
\& my $elem = $struct\->finish( 0 );
.Ve
.PP
Returns the finishing structure element. This is included in the
\&\f(CW\*(C`elements\*(C'\fR but not in the \f(CW\*(C`children\*(C'\fR.
.PP
The finishing element is actually an array, though it should never have
more than one element. Calling \f(CW\*(C`finish\*(C'\fR in list context gets you all
elements of the array. Calling it in scalar context gets you an element
of the array, defaulting to element 0 if no argument is passed.
.SS "start"
.IX Subsection "start"
.Vb 3
\& my $elem = $struct\->start();
\& my @elem = $struct\->start();
\& my $elem = $struct\->start( 0 );
.Ve
.PP
Returns the starting structure element. This is included in the
\&\f(CW\*(C`elements\*(C'\fR but not in the \f(CW\*(C`children\*(C'\fR.
.PP
The starting element is actually an array. The first element (element 0)
is the actual starting delimiter. Subsequent elements, if any, are
insignificant elements (comments or white space) absorbed into the start
element for ease of parsing subsequent elements.
.PP
Calling \f(CW\*(C`start\*(C'\fR in list context gets you all elements of the array.
Calling it in scalar context gets you an element of the array,
defaulting to element 0 if no argument is passed.
.SS "type"
.IX Subsection "type"
.Vb 3
\& my $elem = $struct\->type();
\& my @elem = $struct\->type();
\& my $elem = $struct\->type( 0 );
.Ve
.PP
Returns the group type if any. This will be the leading
PPIx::Regexp::Token::GroupType
token if any. This is included in \f(CW\*(C`elements\*(C'\fR but not in \f(CW\*(C`children\*(C'\fR.
.PP
The type is actually an array. The first element (element 0) is the
actual type determiner. Subsequent elements, if any, are insignificant
elements (comments or white space) absorbed into the type element for
consistency with the way the start element is handled.
.PP
Calling \f(CW\*(C`type\*(C'\fR in list context gets you all elements of the array.
Calling it in scalar context gets you an element of the array,
defaulting to element 0 if no argument is passed.
.SH "SUPPORT"
.IX Header "SUPPORT"
Support is by the author. Please file bug reports at
<http://rt.cpan.org>, or in electronic mail to the author.
.SH "AUTHOR"
.IX Header "AUTHOR"
Thomas R. Wyant, \s-1III \s0\fIwyant at cpan dot org\fR
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2009\-2015 by Thomas R. Wyant, \s-1III\s0
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl 5.10.0. For more details, see the full text
of the licenses in the directory \s-1LICENSES.\s0
.PP
This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.
