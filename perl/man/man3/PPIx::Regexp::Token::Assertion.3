.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PPIx::Regexp::Token::Assertion 3"
.TH PPIx::Regexp::Token::Assertion 3 "2015-10-31" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PPIx::Regexp::Token::Assertion \- Represent a simple assertion.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use PPIx::Regexp::Dumper;
\& PPIx::Regexp::Dumper\->new( \*(Aqqr{\ebfoo\eb}smx\*(Aq )
\&     \->print();
.Ve
.SH "INHERITANCE"
.IX Header "INHERITANCE"
\&\f(CW\*(C`PPIx::Regexp::Token::Assertion\*(C'\fR is a
PPIx::Regexp::Token.
.PP
\&\f(CW\*(C`PPIx::Regexp::Token::Assertion\*(C'\fR has no descendants.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class represents one of the simple assertions; that is, those that
are not defined via parentheses. This includes the zero-width assertions
\&\f(CW\*(C`^\*(C'\fR, \f(CW\*(C`$\*(C'\fR, \f(CW\*(C`\eb\*(C'\fR, \f(CW\*(C`\eB\*(C'\fR, \f(CW\*(C`\eA\*(C'\fR, \f(CW\*(C`\eZ\*(C'\fR, \f(CW\*(C`\ez\*(C'\fR and \f(CW\*(C`\eG\*(C'\fR, as well as:
.IP "\(bu" 4
The \f(CW\*(C`\ez\*(C'\fR assertion added in Perl 5.005,
.IP "\(bu" 4
The \f(CW\*(C`\eK\*(C'\fR assertion added in Perl 5.009005,
.IP "\(bu" 4
The \f(CW\*(C`\eb{gcb}\*(C'\fR assertion (and friends) added in Perl 5.021009.
Similar braced constructions (like \f(CW\*(C`\eb{foo}\*(C'\fR) are unknown tokens.
.SH "METHODS"
.IX Header "METHODS"
This class provides no public methods beyond those provided by its
superclass.
.SH "SUPPORT"
.IX Header "SUPPORT"
Support is by the author. Please file bug reports at
<http://rt.cpan.org>, or in electronic mail to the author.
.SH "AUTHOR"
.IX Header "AUTHOR"
Thomas R. Wyant, \s-1III \s0\fIwyant at cpan dot org\fR
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2009\-2015 by Thomas R. Wyant, \s-1III\s0
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl 5.10.0. For more details, see the full text
of the licenses in the directory \s-1LICENSES.\s0
.PP
This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.
