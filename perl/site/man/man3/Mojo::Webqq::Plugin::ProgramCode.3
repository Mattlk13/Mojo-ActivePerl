.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.31)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojo::Webqq::Plugin::ProgramCode 3"
.TH Mojo::Webqq::Plugin::ProgramCode 3 "2016-07-05" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.ie n .SH "SYNOPSIS Support 26 kinds of programming languages usage: code|cpp>>>...your program code... cpp code|cpp>>> #include <iostream> using namespace std; int \fImain()\fP { cout << ""Hello World!""; return 0; } c code|c>>> #include <stdio.h> int \fImain()\fP { printf(""Hello World!\en""); return 0; } csharp code|csharp>>> using System; class MainClass { static void \fIMain()\fP { Console.WriteLine(""Hello World!""); } } d code|d>>> import std.stdio; void \fImain()\fP { writeln(""Hello World!""); } erlang code|erlang>>> main(_) \-> io:format(""Hello World!~n""). go code|go>>> package main import ( ""fmt"" ) func \fImain()\fP { fmt.Println(""Hello World!"") } idris code|idris>>> module Main main : IO \\fIs0()\fP main = putStrLn ""Hello World!"" java code|java>>> public class Main { public static void main(String[] args) { System.out.println(""Hello World!""); } } scala code|scala>>> object Main extends App { println(""Hello World!"") } php code|php>>> <?php echo ""Hello World\en""; rust code|rust>>> fn \fImain()\fP { println!(""Hello World!""); } assembly code|assembly>>> section .data msg db ""Hello World!"", 0ah section .text global _start _start: mov rax, 1 mov rdi, 1 mov rsi, msg mov rdx, 13 syscall mov rax, 60 mov rdi, 0 syscall"
.el .SH "SYNOPSIS Support 26 kinds of programming languages usage: code|cpp>>>...your program code... cpp code|cpp>>> #include <iostream> using namespace std; int \fImain()\fP { cout << ``Hello World!''; return 0; } c code|c>>> #include <stdio.h> int \fImain()\fP { printf(``Hello World!\en''); return 0; } csharp code|csharp>>> using System; class MainClass { static void \fIMain()\fP { Console.WriteLine(``Hello World!''); } } d code|d>>> import std.stdio; void \fImain()\fP { writeln(``Hello World!''); } erlang code|erlang>>> main(_) \-> io:format(``Hello World!~n''). go code|go>>> package main import ( ``fmt'' ) func \fImain()\fP { fmt.Println(``Hello World!'') } idris code|idris>>> module Main main : IO \\fIs0()\fP main = putStrLn ``Hello World!'' java code|java>>> public class Main { public static void main(String[] args) { System.out.println(``Hello World!''); } } scala code|scala>>> object Main extends App { println(``Hello World!'') } php code|php>>> <?php echo ``Hello World\en''; rust code|rust>>> fn \fImain()\fP { println!(``Hello World!''); } assembly code|assembly>>> section .data msg db ``Hello World!'', 0ah section .text global _start _start: mov rax, 1 mov rdi, 1 mov rsi, msg mov rdx, 13 syscall mov rax, 60 mov rdi, 0 syscall"
.IX Header "SYNOPSIS Support 26 kinds of programming languages usage: code|cpp>>>...your program code... cpp code|cpp>>> #include <iostream> using namespace std; int main() { cout << Hello World!; return 0; } c code|c>>> #include <stdio.h> int main() { printf(Hello World!n); return 0; } csharp code|csharp>>> using System; class MainClass { static void Main() { Console.WriteLine(Hello World!); } } d code|d>>> import std.stdio; void main() { writeln(Hello World!); } erlang code|erlang>>> main(_) -> io:format(Hello World!~n). go code|go>>> package main import ( fmt ) func main() { fmt.Println(Hello World!) } idris code|idris>>> module Main main : IO f(ISs0() main = putStrLn Hello World! java code|java>>> public class Main { public static void main(String[] args) { System.out.println(Hello World!); } } scala code|scala>>> object Main extends App { println(Hello World!) } php code|php>>> <?php echo Hello Worldn; rust code|rust>>> fn main() { println!(Hello World!); } assembly code|assembly>>> section .data msg db Hello World!, 0ah section .text global _start _start: mov rax, 1 mov rdi, 1 mov rsi, msg mov rdx, 13 syscall mov rax, 60 mov rdi, 0 syscall"
